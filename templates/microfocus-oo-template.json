{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This workload template deploys an OO Central cluster, an OO Workflow Designer instance and an AWS RDS Postgresql database instance **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.(qs-1pg0022na)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "License agreement"
                    },
                    "Parameters": [
                        "LicenseAgreement"
                    ]
                },
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID"
                    ]
                },
                {
                    "Label": {
                        "default": "OO EC2 Instances Configuration"
                    },
                    "Parameters": [
                        "OOSSHAccessSGID",
                        "OOKeyPairName"
                    ]
                },
                {
                    "Label": {
                        "default": "Load Balancer Configuration"
                    },
                    "Parameters": [
                        "ELBScheme",
                        "ELBAccessCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "Database Configuration"
                    },
                    "Parameters": [
                        "DBMultiAZ",
                        "DBInstanceType",
                        "DBStorageInGB",
                        "DBMasterUsername",
                        "DBMasterPassword",
                        "DBMasterPasswordConfirm",
                        "OOCentralDBName",
                        "OODesignerDBName",
                        "DBBackupRetentionPeriod",
                        "DBPreferredBackupWindow",
                        "DBPreferredMaintenanceWindow"
                    ]
                },
                {
                    "Label": {
                        "default": "OO Central Cluster Configuration"
                    },
                    "Parameters": [
                        "OOCentralInstanceType",
                        "OOCentralT2T3Burst",
                        "CWCentralMonitoring",
                        "OOCentralNodesSize",
                        "NotificationTrigger",
                        "OperatorEmail",
                        "OOCentralPass",
                        "OOCentralPassConfirm",
                        "OOCentralOOPass",
                        "OOCentralOOPassConfirm",
                        "OOCentralRootPass",
                        "OOCentralRootPassConfirm",
                        "QSS3BucketNameForCluster",
                        "QSS3KeyPrefixForCluster"
                    ]
                },
                {
                    "Label": {
                        "default": "OO Workflow Designer Instance Configuration"
                    },
                    "Parameters": [
                        "OODesignerTrigger",
                        "OODesignerInstanceType",
                        "CWDesignerMonitoring",
                        "OODesignerPass",
                        "OODesignerPassConfirm",
                        "OODesignerOOPass",
                        "OODesignerOOPassConfirm",
                        "OODesignerRootPass",
                        "OODesignerRootPassConfirm"
                    ]
                }
            ],
            "ParameterLabels": {
                "CWCentralMonitoring": {
                    "default": "Cloud Watch Monitoring"
                },
                "CWDesignerMonitoring": {
                    "default": "Cloud Watch Monitoring"
                },
                "DBBackupRetentionPeriod": {
                    "default": "DB Backup Retention"
                },
                "DBInstanceType": {
                    "default": "Database Instance Type"
                },
                "DBMasterPassword": {
                    "default": "Database Password"
                },
                "DBMasterPasswordConfirm": {
                    "default": "Confirm Password"
                },
                "DBMasterUsername": {
                    "default": "Database Master User"
                },
                "DBMultiAZ": {
                    "default": "Deploy in Multi-AZ"
                },
                "DBPreferredBackupWindow": {
                    "default": "DB Backup Window"
                },
                "DBPreferredMaintenanceWindow": {
                    "default": "DB Maintenance Window"
                },
                "DBStorageInGB": {
                    "default": "Database Storage"
                },
                "ELBScheme": {
                    "default": "Load Balancer Scheme"
                },
                "ELBAccessCIDR": {
                    "default": "Load Balancer Access CIDR"
                },
                "LicenseAgreement": {
                    "default": "License agreement"
                },
                "NotificationTrigger": {
                    "default": "E-mail Notifications"
                },
                "OOCentralDBName": {
                    "default": "OO Central's DB name"
                },
                "OOCentralInstanceType": {
                    "default": "Central Instance Type"
                },
                "OOCentralNodesSize": {
                    "default": "Central Nodes in cluster"
                },
                "OOCentralOOPass": {
                    "default": "Linux 'oo' User Password"
                },
                "OOCentralOOPassConfirm": {
                    "default": "Confirm Password"
                },
                "OOCentralPass": {
                    "default": "Central Admin Password"
                },
                "OOCentralPassConfirm": {
                    "default": "Confirm Password"
                },
                "OOCentralRootPass": {
                    "default": "Linux 'root' password"
                },
                "OOCentralRootPassConfirm": {
                    "default": "Confirm Password"
                },
                "OOCentralT2T3Burst": {
                    "default": "T2/T3 Burst Mode"
                },
                "OODesignerDBName": {
                    "default": "OO Designer's DB name"
                },
                "OODesignerInstanceType": {
                    "default": "Designer Instance Type"
                },
                "OODesignerOOPass": {
                    "default": "Linux 'oo' User Password"
                },
                "OODesignerOOPassConfirm": {
                    "default": "Confirm Password"
                },
                "OODesignerPass": {
                    "default": "Designer Admin Password"
                },
                "OODesignerPassConfirm": {
                    "default": "Confirm Password"
                },
                "OODesignerRootPass": {
                    "default": "Linux 'root' Password"
                },
                "OODesignerRootPassConfirm": {
                    "default": "Confirm Password"
                },
                "OODesignerTrigger": {
                    "default": "Deploy Workflow Designer"
                },
                "OOKeyPairName": {
                    "default": "OO Key Pair Name"
                },
                "OOSSHAccessSGID": {
                    "default": "SSH Access"
                },
                "OperatorEmail": {
                    "default": "Operator Email"
                },
                "PrivateSubnet1ID": {
                    "default": "Private Subnet 1 ID"
                },
                "PrivateSubnet2ID": {
                    "default": "Private Subnet 2 ID"
                },
                "PublicSubnet1ID": {
                    "default": "Public Subnet 1 ID"
                },
                "PublicSubnet2ID": {
                    "default": "Public Subnet 2 ID"
                },
                "QSS3BucketNameForCluster": {
                    "default": "S3 Bucket Name for OO Cluster"
                },
                "QSS3KeyPrefixForCluster": {
                    "default": "S3 Key Prefix for OO Cluster"
                },
                "VPCID": {
                    "default": "VPC ID"
                }
            }
        }
    },
    "Parameters": {
        "CWCentralMonitoring": {
            "AllowedValues": [
                "false",
                "true"
            ],
            "ConstraintDescription": "The Cloud Watch Monitoring option must be set to either false or true",
            "Default": "false",
            "Description": "Choose True to enable detailed CloudWatch monitoring of the OO Central instances for an additional cost",
            "Type": "String"
        },
        "CWDesignerMonitoring": {
            "AllowedValues": [
                "false",
                "true"
            ],
            "ConstraintDescription": "Must be either false or true",
            "Default": "false",
            "Description": "Select whether you want Cloud Watch to perform detailed (true) or standard/basic (false) monitoring on the OO Workflow Designer instance",
            "Type": "String"
        },
        "DBBackupRetentionPeriod": {
            "Default": "10",
            "Description": "Select the number of days that Amazon RDS should retain automatic backups of the DB instance. A backup retention period of zero days will disable automated backups for the DB Instance",
            "MaxValue": "35",
            "MinValue": "1",
            "Type": "Number"
        },
        "DBMasterPasswordConfirm": {
            "AllowedPattern": "^(?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*",
            "ConstraintDescription": "The password for the Database master username and it's confirmation must be between 8 and 32 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "DBInstanceType": {
            "AllowedValues": [
                "db.m4.large",
                "db.m4.xlarge",
                "db.t2.large",
                "db.t2.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "db.t2.large",
            "Description": "Type of EC2 instance for the database server.",
            "Type": "String"
        },
        "DBMasterPassword": {
            "AllowedPattern": "^(?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*",
            "ConstraintDescription": "The password for the Database master username and it's confirmation must be between 8 and 32 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "Description": "Password for the database master user",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "DBMasterUsername": {
            "AllowedPattern": "^[a-zA-Z0-9]{2,32}$",
            "ConstraintDescription": "The Database Master Username must be between alphanumeric, can contain uppercases, lowercases and must be between 2 and 32 chars long",
            "Default": "oodbadmin",
            "Description": "The name of the database master user",
            "MaxLength": "32",
            "MinLength": "2",
            "Type": "String"
        },
        "DBMultiAZ": {
            "AllowedValues": [
                false,
                true
            ],
            "Default": false,
            "Description": "Choose 'true' to deploy the database across multiple Availability Zones",
            "Type": "String"
        },
        "DBPreferredBackupWindow": {
            "AllowedPattern": "^(([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])-(([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$",
            "Default": "01:00-01:30",
            "Description": "The daily time range in UTC during which the database automated backups are created. Must be in the format hh24:mi-hh24:mi, the time interval must be at least 30 minutes, and must not conflict with the preferred maintenance window",
            "Type": "String"
        },
        "DBPreferredMaintenanceWindow": {
            "AllowedPattern": "^((\\b(?=\\w{3}\\b)(Mon|Tue|Wed|Thu|Fri|Sat|Sun))\\w*:([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])-((\\b(?=\\w{3}\\b)(Mon|Tue|Wed|Thu|Fri|Sat|Sun)\\w*):([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])$",
            "Default": "Sun:01:30-Sun:02:00",
            "Description": "The weekly time range in UTC during which system maintenance can occur. Must be in the format ddd:hh24:mi-ddd:hh24:mi and must not conflict with the preferred backup window",
            "Type": "String"
        },
        "DBStorageInGB": {
            "Default": "100",
            "Description": "Define the allocated storage for the database server (in GBs) - minimum 20, maximum 16384",
            "MaxValue": "16384",
            "MinValue": "20",
            "Type": "Number"
        },
        "ELBScheme": {
            "AllowedValues": [
                "internal",
                "internet-facing"
            ],
            "ConstraintDescription": "The Load Balancer scheme must be either 'internet-facing' or 'internal'",
            "Default": "internal",
            "Description": "Choose the Load Balancer's exposure: internet-facing or internal",
            "Type": "String"
        },
        "ELBAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "The Load Balancer CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "The CIDR IP range that is permitted to access the Elastic Load Balancer. We recommend that you set this value to a trusted IP range. If you have chosen the 'internal' Load Balancer scheme, then the IP range you enter here must exist in your VPC",
            "Type": "String"
        },
        "LicenseAgreement": {
            "AllowedValues": [
                "-",
                "I agree"
            ],
            "Default": "-",
            "Description": "I have read and agree to the terms of the End User License Agreement for Micro Focus Operations Orchestration (https://www.microfocus.com/media/documentation/micro_focus_end_user_license_agreement.pdf).",
            "Type": "String"
        },
        "NotificationTrigger": {
            "AllowedValues": [
                "false",
                "true"
            ],
            "ConstraintDescription": "E-mail notifications parameter must be set to either 'true' or 'false'",
            "Default": "true",
            "Description": "Choose 'false' if you don't want to receive e-mail notifications about failed auto scaling operations",
            "Type": "String"
        },
        "OOCentralDBName": {
            "AllowedPattern": "^[a-zA-Z0-9]{2,32}$",
            "ConstraintDescription": "The Central database name must be alphanumeric, can contain uppercases, lowercases and must be between 2 and 32 chars long",
            "Default": "oocentral",
            "Description": "The name for OO Central's database (2-32 characters long)",
            "MaxLength": "32",
            "MinLength": "2",
            "Type": "String"
        },
        "OOCentralInstanceType": {
            "AllowedValues": [
                "t3.medium",
                "t3.large",
                "t3.xlarge",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "m5.large",
                "m5.xlarge",
                "m5a.large",
                "m5a.xlarge"
            ],
            "ConstraintDescription": "Must be a valid instance type",
            "Default": "t2.medium",
            "Description": "EC2 instance type for Central nodes",
            "Type": "String"
        },
        "OOCentralNodesSize": {
            "AllowedPattern": "^([1-9]|[0-1][0])$",
            "ConstraintDescription": "Must be any number between: 1 and 10",
            "Default": "2",
            "Description": "The amount of Central instances (nodes) in the cluster - max 10",
            "Type": "String"
        },
        "OOCentralOOPass": {
            "AllowedPattern": "^(?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*",
            "ConstraintDescription": "Central Instance - The passwords for the 'oo' linux user and it's confirmation value must be different than the root user password, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "Description": "Password for the linux user 'oo' inside the Central instances. This user has the ownership of OO files and processes. The password must be different than the password of the Linux root user, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "OOCentralOOPassConfirm": {
            "AllowedPattern": "^(?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*",
            "ConstraintDescription": "Central Instance - The passwords for the 'oo' linux user and it's confirmation value must be different than the root user password, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "OOCentralPass": {
            "AllowedPattern": "^(?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*",
            "ConstraintDescription": "OO Central administrative password must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "Description": "Password for the OO Central administrative user 'admin'. Must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "OOCentralPassConfirm": {
            "AllowedPattern": "^(?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*",
            "ConstraintDescription": "OO Central administrative password and it's confirmation must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "OOCentralRootPass": {
            "AllowedPattern": "^(?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*",
            "ConstraintDescription": "Central Instance - The passwords for the 'root' linux user and it's confirmation value must be different than the oo user password, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "Description": "Password for the linux user 'root' inside the Central instances - Must be different than the password for the Linux oo user, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "OOCentralRootPassConfirm": {
            "AllowedPattern": "^(?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*",
            "ConstraintDescription": "Central Instance - The passwords for the 'root' linux user and it's confirmation value must be different than the password for the Linux oo user, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "OOCentralT2T3Burst": {
            "AllowedValues": [
                "standard",
                "unlimited"
            ],
            "ConstraintDescription": "If OOCentralInstanceType is either a T2 or T3 instance type, the CPU burst mode must be either 'standard' or 'unlimited'",
            "Default": "standard",
            "Description": "For T2/T3 instances only, choose the CPU burstable performance mode",
            "Type": "String"
        },
        "OODesignerDBName": {
            "AllowedPattern": "^$|([a-zA-Z0-9]{2,32}$)",
            "ConstraintDescription": "The Designer database name must be alphanumeric, can contain uppercases, lowercases and must be between 2 and 32 chars long",
            "Default": "oodesigner",
            "Description": "The name for OO Workflow Designer's database (2-32 characters long). Ignore this parameter if you do not want to deploy OO Workflow Designer",
            "Type": "String"
        },
        "OODesignerInstanceType": {
            "AllowedValues": [
                "t2.medium",
                "t3.medium",
                "m5.large",
                "m5a.large"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "t2.medium",
            "Description": "EC2 instance type for Workflow Designer",
            "Type": "String"
        },
        "OODesignerPass": {
            "AllowedPattern": "^$|((?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*)",
            "ConstraintDescription": "OO Workflow Designer administrative password and it's confirmation must be different than Central admin password, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "Description": "Password for the OO Designer administrative user 'admin' - Must be different than the Central admin password, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "NoEcho": "true",
            "Type": "String"
        },
        "OODesignerPassConfirm": {
            "AllowedPattern": "^$|((?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*)",
            "ConstraintDescription": "OO Workflow Designer administrative password and it's confirmation must be different than Central admin password, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "NoEcho": "true",
            "Type": "String"
        },
        "OODesignerOOPass": {
            "AllowedPattern": "^$|((?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*)",
            "ConstraintDescription": "Workflow Desiner Instance - The passwords for the 'oo' linux user and it's confirmation value must be different than the root user password, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "Description": "Password for the linux user 'oo' inside the Designer instance. This user has the ownership of OO files and processes. The password must be different than the password for the Linux root user, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "NoEcho": "true",
            "Type": "String"
        },
        "OODesignerOOPassConfirm": {
            "AllowedPattern": "^$|((?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*)",
            "ConstraintDescription": "Workflow Desiner Instance - The passwords for the 'oo' linux user and it's confirmation value must be different than the root user password, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "NoEcho": "true",
            "Type": "String"
        },
        "OODesignerRootPass": {
            "AllowedPattern": "^$|((?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*)",
            "ConstraintDescription": "Workflow Designer Instance - The passwords for the 'root' linux user and it's confirmation value must be different than the oo user password, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "Description": "Password for the linux user 'root' inside the Designer instance - Must be different than the password for the Linux oo user, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "NoEcho": "true",
            "Type": "String"
        },
        "OODesignerRootPassConfirm": {
            "AllowedPattern": "^$|((?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*()+\\-={}|;:,.<>?]).*)",
            "ConstraintDescription": "Workflow Designer Instance - The passwords for the 'root' linux user and it's confirmation value must be different than the password for the Linux oo user, must be between 8 and 12 chars long, alphanumeric, can contain uppercases, lowercases, and at least one of the following characters: !#$%^&*()+\\-={}|;:,.<>?",
            "NoEcho": "true",
            "Type": "String"
        },
        "OODesignerTrigger": {
            "AllowedValues": [
                "false",
                "true"
            ],
            "ConstraintDescription": "The 'Deploy Workflow Designer' option must be sset to either 'true' or 'false'",
            "Default": "true",
            "Description": "Choose 'false' to not deploy the OO Workflow Designer instance. If you choose 'false', then all parameters related to Workflow Designer are ignored",
            "Type": "String"
        },
        "OOKeyPairName": {
            "AllowedPattern": ".+",
            "ConstraintDescription": "The OO Key Pair Name that will be used for SSH access to OO instances must not be empty",
            "Description": "Name of an existing EC2 key pair for accessing OO Central and Workflow Designer EC2 instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "OOSSHAccessSGID": {
            "Description": "SSH access to OO instances will be allowed from all instances under the security group ID chosen here",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "OperatorEmail": {
            "AllowedPattern": "^$|(([a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?))",
            "ConstraintDescription": "The Operator Email parameter must be a valid email address",
            "Description": "(Optional) Email of the person that will be informed about failed auto scaling operations",
            "Type": "String"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of the private subnet 1 in Availability Zone 1 for OO Central cluster and Workflow Designer (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of the private subnet 2 in Availability Zone 2 for OO Central cluster and Workflow Designer (e.g., subnet-b1f432cd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "ID of the public subnet 1 in Availability Zone 1 for the internet-facing Application Load Balancer (e.g., subnet-9bc642ac)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of the public subnet 2 in Availability Zone 2 for the internet-facing Application Load Balancer (e.g., subnet-e3246d8e)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSS3BucketNameForCluster": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "The S3 bucket for OO Cluster name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name that will be used by OO Central cluster instances to store the encryption keys. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefixForCluster": {
            "AllowedPattern": "^$|^([0-9a-zA-Z-]+\/)*$",
            "ConstraintDescription": "The S3 Key Prefix for OO Cluster parameter can be either empty, or follow this constraint: can include numbers, lowercase letters, uppercase letters, forward slashes (/), hyphens (-), and must end in a forward slash (/).",
            "Description": "S3 key prefix that will be used by OO Central cluster instances to store the encryption files. This parameter can be either empty or, must follow this constraint: can include numbers, lowercase letters, uppercase letters, forward slashes (/), hyphens (-), and must end in a forward slash (/).",
            "Type": "String"
        },
        "VPCID": {
            "Description": "ID of your existing VPC for deployment",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Rules": {
        "DBMatchPasswords": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "DBMasterPassword"
                            },
                            {
                                "Ref": "DBMasterPasswordConfirm"
                            }
                        ]
                    },
                    "AssertDescription": "Database password and it's confirmation do not match"
                }
            ]
        },
        "KeyPairsNotEmpty": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::EachMemberEquals": [
                                    {
                                        "Fn::RefAll": "AWS::EC2::KeyPair::KeyName"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "All key pair parameters must not be empty"
                }
            ]
        },
        "LicenseAgreementRule": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Contains": [
                            [
                                "I agree"
                            ],
                            {
                                "Ref": "LicenseAgreement"
                            }
                        ]
                    },
                    "AssertDescription": "User must agree to the terms of the license agreement."
                }
            ]
        },
        "NotificationEmailNotEmpty": {
            "RuleCondition" : {
                "Fn::Equals":[
                    {
                        "Ref": "NotificationTrigger"
                    },
                    "true"
                ]
            },
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Equals": [
                                    {
                                        "Ref": "OperatorEmail"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "E-mail notifications are set to: true.  You must provide a valid email address for the parameter: Operator Email, or set E-mail Notifications to false"
                }
            ]
        },
        "OOCentralSpecificRules": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "OOCentralPassConfirm"
                            },
                            {
                                "Ref": "OOCentralPass"
                            }
                        ]
                    },
                    "AssertDescription": "Central admin pass and it's confirmation do not match"
                },
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "OOCentralOOPassConfirm"
                            },
                            {
                                "Ref": "OOCentralOOPass"
                            }
                        ]
                    },
                    "AssertDescription": "Central instance - password for oo linux user and it's confirmation do not match"
                },
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "OOCentralRootPassConfirm"
                            },
                            {
                                "Ref": "OOCentralRootPass"
                            }
                        ]
                    },
                    "AssertDescription": "Central instance - password for root linux user and it's confirmation do not match"
                },
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Equals": [
                                    {
                                        "Ref": "OOCentralRootPass"
                                    },
                                    {
                                        "Ref": "OOCentralOOPass"
                                    }
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "Password of 'oo' and 'root' linux users in Central instances must be different"
                },
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::And": [
                                    {
                                        "Fn::Or": [
                                            {
                                                "Fn::Equals": [
                                                    {
                                                        "Ref": "OOCentralInstanceType"
                                                    },
                                                    "m5a.large"
                                                ] 
                                            },
                                            {
                                                "Fn::Equals": [
                                                    {
                                                        "Ref": "OOCentralInstanceType"
                                                    },
                                                    "m5a.xlarge"
                                                ] 
                                            }
                                        ]
                                    },
                                    {
                                        "Fn::Equals": [
                                            {
                                                "Ref": "OOCentralT2T3Burst"
                                            },
                                            "unlimited"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "Central Instance - Cannot choose 'unlimited' for CPU Burst Mode if instance type is not a T2 or T3 class"
                }
            ]
        },
        "OODesignerSpecificRules": {
            "RuleCondition" : {
                "Fn::Equals":[
                    {
                        "Ref": "OODesignerTrigger"
                    },
                    "true"
                ]
            },
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Contains": [
                                    [
                                        {
                                            "Ref": "OODesignerPass"
                                        },
                                        {
                                            "Ref": "OODesignerPassConfirm"
                                        },
                                        {
                                            "Ref": "OODesignerOOPass"
                                        },
                                        {
                                            "Ref": "OODesignerOOPassConfirm"
                                        },
                                        {
                                            "Ref": "OODesignerRootPass"
                                        },
                                        {
                                            "Ref": "OODesignerRootPassConfirm"
                                        },
                                        {
                                            "Ref": "OODesignerDBName"
                                        }
                                    ],
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "If you choose to deploy Workflow Designer, you must not leave any of the following required Workflow Designer parameters empty: Designer Admin Pass and it's confirmation, Linux oo user password and it's confirmation, Linux root user password and it's confirmation and Workflow Designer database name"
                },
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "OODesignerPassConfirm"
                            },
                            {
                                "Ref": "OODesignerPass"
                            }
                        ]
                    },
                    "AssertDescription": "Workflow Designer admin password and it's confirmation do not match"
                },
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "OODesignerOOPassConfirm"
                            },
                            {
                                "Ref": "OODesignerOOPass"
                            }
                        ]
                    },
                    "AssertDescription": "Workflow Designer - password for oo linux user and it's confirmation do not match"
                },
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "OODesignerRootPassConfirm"
                            },
                            {
                                "Ref": "OODesignerRootPass"
                            }
                        ]
                    },
                    "AssertDescription": "Workflow Designer - password for root linux user and it's confirmation do not match"
                },
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Equals": [
                                    {
                                        "Ref": "OODesignerPass"
                                    },
                                    {
                                        "Ref": "OOCentralPass"
                                    }
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "OO Central Admin Password must be different than the OO Workflow Designer Admin Password"
                }
            ]
        },
        "SubnetsInVPC": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "All subnets must in the VPC"
                }
            ]
        }
    },
    "Conditions": {
        "ALBSchemeType": {
            "Fn::Equals": [
                {
                    "Ref": "ELBScheme"
                },
                "internet-facing"
            ]
        },
        "CreateDesigner": {
            "Fn::Equals": [
                {
                    "Ref": "OODesignerTrigger"
                },
                "true"
            ]
        },
        "NotificationTopicCondition": {
            "Fn::Equals": [
                {
                    "Ref": "NotificationTrigger"
                },
                "true"
            ]
        },
        "OOCentralMonitoring": {
            "Fn::Equals": [
                {
                    "Ref": "CWCentralMonitoring"
                },
                "true"
            ]
        },
        "OOCentralT2T3BurstOption": {
            "Fn::Not": [
                {
                    "Fn::Or": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "OOCentralInstanceType"
                                },
                                "m5.large"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "OOCentralInstanceType"
                                },
                                "m5a.xlarge"
                            ]
                        }
                    ]
                }
            ]
        },
        "OODesignerMonitoring": {
            "Fn::Equals": [
                {
                    "Ref": "CWDesignerMonitoring"
                },
                "true"
            ]
        },
        "OODesignerTClassOption": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "OODesignerInstanceType"
                        },
                        "t2.medium"
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "OODesignerInstanceType"
                        },
                        "t3.medium"
                    ]
                }
            ]
        }
    },
    "Resources": {
        "DBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "DBStorageInGB"
                },
                "AllowMajorVersionUpgrade": false,
                "AutoMinorVersionUpgrade": false,
                "BackupRetentionPeriod": {
                    "Ref": "DBBackupRetentionPeriod"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceType"
                },
                "DBName": {
                    "Ref": "OOCentralDBName"
                },
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "Engine": "postgres",
                "EngineVersion": "9.6.11",
                "MasterUsername": {
                    "Ref": "DBMasterUsername"
                },
                "MasterUserPassword": {
                    "Ref": "DBMasterPassword"
                },
                "MultiAZ": {
                    "Ref": "DBMultiAZ"
                },
                "PreferredBackupWindow": {
                    "Ref": "DBPreferredBackupWindow"
                },
                "PreferredMaintenanceWindow": {
                    "Ref": "DBPreferredMaintenanceWindow"
                },
                "PubliclyAccessible": false,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-RDS Instance"
                        }
                    }
                ],
                "VPCSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ]
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Access rule(s) to the RDS PostgreSQL instance",
                "SecurityGroupIngress": [
                    {
                        "Description": "OO to DB",
                        "FromPort": 5432,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "OOInstancesSecurityGroup"
                        },
                        "ToPort": 5432
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-RDS Security Group"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            }
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "OO Stack - Group of 2 subnets in different AZs for RDS database instance to be deployed in",
                "DBSubnetGroupName": {
                    "Fn::Sub": "${AWS::StackName}-RDS PostgreSQL Subnet Group"
                },
                "SubnetIds": [
                    {
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    }
                ],
                "Tags": [
                    {
                        "Key" : "Name",
                        "Value" : {
                            "Fn::Sub": "${AWS::StackName}-RDS Subnet Group"
                        }
                    }
                ]
            }
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "OO Stack - TCP access rule(s) for ELB",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-Load Balancer Security Group"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            }
        },
        "ELBSecurityGroupIngressOOInstances": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties":{
                "IpProtocol": "tcp",
                "FromPort": 443,
                "ToPort": 443,
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "OOInstancesSecurityGroup",
                        "GroupId"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "ELBSecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "ELBSecurityGroupIngressUserDefined": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties":{
                "IpProtocol": "tcp",
                "FromPort": 443,
                "ToPort": 443,
                "CidrIp": {
                    "Ref": "ELBAccessCIDR"
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "ELBSecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "ElasticLoadBalancerV2": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": {
                    "Fn::If": [
                        "ALBSchemeType",
                        "internet-facing",
                        "internal"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Fn::If": [
                            "ALBSchemeType",
                            {
                                "Ref": "PublicSubnet1ID"
                            },
                            {
                                "Ref": "PrivateSubnet1ID"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "ALBSchemeType",
                            {
                                "Ref": "PublicSubnet2ID"
                            },
                            {
                                "Ref": "PrivateSubnet2ID"
                            }
                        ]
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-Elastic Load Balancer"
                        }
                    }
                ],
                "Type": "application"
            }
        },
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEmail"
                        },
                        "Protocol": "email"
                    }
                ],
                "TopicName": {
                    "Fn::Sub": "NotificationTopic-${AWS::StackName}-OO-Central-Cluster-Failed-Autoscaling-Ops"
                }
            },
            "Condition": "NotificationTopicCondition"
        },
        "OOCentralAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "Cooldown": "600",
                "DesiredCapacity": {
                    "Ref": "OOCentralNodesSize"
                },
                "HealthCheckGracePeriod": 300,
                "HealthCheckType": "EC2",
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "OOCentralClusterAutoScalingLaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "OOCentralClusterAutoScalingLaunchTemplate",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "MaxSize": {
                    "Ref": "OOCentralNodesSize"
                },
                "MinSize": {
                    "Ref": "OOCentralNodesSize"
                },
                "NotificationConfigurations": {
                    "Fn::If": [
                        "NotificationTopicCondition",
                        [
                            {
                                "NotificationTypes": [
                                    "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                    "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                                ],
                                "TopicARN": {
                                    "Ref": "NotificationTopic"
                                }
                            }
                        ],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "PropagateAtLaunch": true,
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-OO Central Node"
                        }
                    }
                ],
                "TargetGroupARNs": [
                    {
                        "Ref": "OOCentralTargetGroup"
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "OOCentralNodesSize"
                    },
                    "Timeout": "PT30M"
                }
            }
        },
        "OOCentralClusterAutoScalingLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "oocentralconfig": [
                            "setupCfnHup",
                            "setupLogAgent",
                            "startoocentral"
                        ]
                    },
                    "startoocentral": {
                        "files": {
                            "/var/lib/cloud/instance/oocfg": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "db.endpoint=",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "\n",
                                            "lb.endpoint=",
                                            {
                                                "Fn::GetAtt": [
                                                    "ElasticLoadBalancerV2",
                                                    "DNSName"
                                                ]
                                            },
                                            "\n",
                                            "stack.name=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "stack.id=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "db.user=",
                                            {
                                                "Ref": "DBMasterUsername"
                                            },
                                            "\n",
                                            "db.pass=",
                                            {
                                                "Ref": "DBMasterPassword"
                                            },
                                            "\n",
                                            "db.name=",
                                            {
                                                "Ref": "OOCentralDBName"
                                            },
                                            "\n",
                                            "oo.pass=",
                                            {
                                                "Ref": "OOCentralPass"
                                            },
                                            "\n",
                                            "oosys.pass=",
                                            {
                                                "Ref": "OOCentralOOPass"
                                            },
                                            "\n",
                                            "rootsys.pass=",
                                            {
                                                "Ref": "OOCentralRootPass"
                                            },
                                            "\n",
                                            "bucket.name=",
                                            {
                                                "Ref": "QSS3BucketNameForCluster"
                                            },
                                            "\n",
                                            "bucket.prefix=",
                                            {
                                                "Ref": "QSS3KeyPrefixForCluster"
                                            },
                                            "\n",
                                            "elb.listener.arn=",
                                            {
                                                "Ref": "OOListener"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "oo",
                                "group": "microfocus"
                            }
                        },
                        "commands": {
                            "startcentral": {
                                "command": "/etc/init.d/oo start",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "setupLogAgent": {
                        "packages": {
                            "yum": {
                                "awslogs": []
                            }
                        },
                        "files": {
                            "/etc/awslogs/awscli.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[plugins]\n",
                                            "cwlogs = cwlogs\n",
                                            "[default]\n",
                                            "region = ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/awslogs/awslogs.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[general]\n",
                                            "state_file = /var/lib/awslogs/agent-state\n",
                                            "[/opt/microfocus/oo/central/var/logs/wrapper.log]\n",
                                            "file = /opt/microfocus/oo/central/var/logs/wrapper.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Central-Node/wrapper.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/central/var/logs/server.log]\n",
                                            "file = /opt/microfocus/oo/central/var/logs/server.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Central-Node/server.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/central/var/logs/general.log]\n",
                                            "file = /opt/microfocus/oo/central/var/logs/general.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Central-Node/general.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/central/var/logs/deployment.log]\n",
                                            "file = /opt/microfocus/oo/central/var/logs/deployment.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Central-Node/deployment.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/central/var/logs/execution.log]\n",
                                            "file = /opt/microfocus/oo/central/var/logs/execution.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Central-Node/execution.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/central/var/logs/reverse-connection.log]\n",
                                            "file = /opt/microfocus/oo/central/var/logs/reverse-connection.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Central-Node/reverse-connection.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/central/var/logs/localhost_access_log]\n",
                                            "file = /opt/microfocus/oo/central/var/logs/localhost_access_log.*\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Central-Node/localhost_access.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "awslogs": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "packages": {
                                        "yum": [
                                            "awslogs"
                                        ]
                                    },
                                    "files": [
                                        "/etc/awslogs/awscli.conf",
                                        "/etc/awslogs/awslogs.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "setupCfnHup": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack = ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region = ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "interval = 1"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers = post.update\n",
                                            "path=Resources.OOCentralClusterAutoScalingLaunchTemplate.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init --verbose ",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " --resource OOCentralClusterAutoScalingLaunchTemplate",
                                            " --configsets startoocentral",
                                            " runas=root\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "LaunchTemplateName": {
                    "Fn::Sub": "${AWS::StackName}-OO_Central_Cluster_Launch_Template"
                },
                "LaunchTemplateData": {
                    "CreditSpecification": {
                        "Fn::If": [
                            "OOCentralT2T3BurstOption",
                            {
                                "CpuCredits": {
                                    "Ref": "OOCentralT2T3Burst"
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::GetAtt": [
                                "OOInstancesIAMProfile",
                                "Arn"
                            ]
                        }
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            "AMZLNX1Central"
                        ]
                    },
                    "InstanceType": {
                        "Ref": "OOCentralInstanceType"
                    },
                    "KeyName": {
                        "Ref": "OOKeyPairName"
                    },
                    "Monitoring": {
                        "Fn::If": [
                            "OOCentralMonitoring",
                            {
                                "Enabled": true
                            },
                            {
                                "Enabled": false
                            }
                        ]
                    },
                    "SecurityGroupIds": [
                        {
                            "Fn::GetAtt": [
                                "OOInstancesSecurityGroup",
                                "GroupId"
                            ]
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash\n",
                                    "export PATH=$PATH:/usr/bin\n",
                                    "yum update -y",
                                    "\n",
                                    "which pip &> /dev/null\n",
                                    "if [ $? -ne 0 ] ; then\n",
                                    "    echo \"PIP NOT INSTALLED\"\n",
                                    "    [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo \"PIP INSTALLED\"\n",
                                    "    [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo \"PIP INSTALLED\"\n",
                                    "fi\n",
                                    "pip install --upgrade pip &> /dev/null\n",
                                    "pip install awscli --ignore-installed six &> /dev/null\n",
                                    "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                    "INSTID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`",
                                    "\n",
                                    "/opt/aws/bin/cfn-init -v ",
                                    " --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " --resource OOCentralClusterAutoScalingLaunchTemplate",
                                    " --configsets oocentralconfig ",
                                    " --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n",
                                    "# Signal the status from cfn-init\n",
                                    "/opt/aws/bin/cfn-signal -e $? -i $INSTID --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " --resource OOCentralAutoScalingGroup --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n"
                                ]
                            ]
                        }
                    }
                }
            }
        },
        "OOCentralTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 15,
                "HealthCheckPath": "/oo/",
                "HealthCheckPort": "8445",
                "HealthCheckProtocol": "HTTPS",
                "HealthCheckTimeoutSeconds": 10,
                "HealthyThresholdCount": 3,
                "Matcher": {
                    "HttpCode": "302"
                },
                "Port": 8445,
                "Protocol": "HTTPS",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-Central Target Group"
                        }
                    }
                ],
                "TargetGroupAttributes": [
                    {
                        "Key": "deregistration_delay.timeout_seconds",
                        "Value": "75"
                    },
                    {
                        "Key": "stickiness.enabled",
                        "Value": "true"
                    },
                    {
                        "Key": "stickiness.lb_cookie.duration_seconds",
                        "Value": "43200"
                    }
                ],
                "TargetType": "instance",
                "UnhealthyThresholdCount": 3,
                "VpcId": {
                    "Ref": "VPCID"
                }
            }
        },
        "OODesignerInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "OODesignerLaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "OODesignerLaunchTemplate",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "Monitoring": {
                    "Fn::If": [
                        "OODesignerMonitoring",
                        true,
                        false
                    ]
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1ID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-Workflow Designer"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "oodesignerconfig": [
                            "setupCfnHup",
                            "setupLogAgent",
                            "startoodesigner"
                        ]
                    },
                    "startoodesigner": {
                        "files": {
                            "/var/lib/cloud/instance/oocfg": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "db.endpoint=",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "\n",
                                            "lb.endpoint=",
                                            {
                                                "Fn::GetAtt": [
                                                    "ElasticLoadBalancerV2",
                                                    "DNSName"
                                                ]
                                            },
                                            "\n",
                                            "db.user=",
                                            {
                                                "Ref": "DBMasterUsername"
                                            },
                                            "\n",
                                            "db.pass=",
                                            {
                                                "Ref": "DBMasterPassword"
                                            },
                                            "\n",
                                            "db.name=",
                                            {
                                                "Ref": "OODesignerDBName"
                                            },
                                            "\n",
                                            "oo.pass=",
                                            {
                                                "Ref": "OODesignerPass"
                                            },
                                            "\n",
                                            "oosys.pass=",
                                            {
                                                "Ref": "OODesignerOOPass"
                                            },
                                            "\n",
                                            "rootsys.pass=",
                                            {
                                                "Ref": "OODesignerRootPass"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "oo",
                                "group": "microfocus"
                            }
                        },
                        "commands": {
                            "startdesigner": {
                                "command": "/etc/init.d/oo start",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "setupLogAgent": {
                        "packages": {
                            "yum": {
                                "awslogs": []
                            }
                        },
                        "files": {
                            "/etc/awslogs/awscli.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[plugins]\n",
                                            "cwlogs = cwlogs\n",
                                            "[default]\n",
                                            "region = ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/awslogs/awslogs.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[general]\n",
                                            "state_file = /var/lib/awslogs/agent-state\n",
                                            "[/opt/microfocus/oo/designer/var/logs/wrapper.log]\n",
                                            "file = /opt/microfocus/oo/designer/var/logs/wrapper.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Designer/wrapper.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/designer/var/logs/server.log]\n",
                                            "file = /opt/microfocus/oo/designer/var/logs/server.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Designer/server.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/designer/var/logs/general.log]\n",
                                            "file = /opt/microfocus/oo/designer/var/logs/general.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Designer/general.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/designer/var/logs/deployment.log]\n",
                                            "file = /opt/microfocus/oo/designer/var/logs/deployment.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Designer/deployment.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/designer/var/logs/execution.log]\n",
                                            "file = /opt/microfocus/oo/designer/var/logs/execution.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Designer/execution.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/designer/var/logs/reverse-connection.log]\n",
                                            "file = /opt/microfocus/oo/designer/var/logs/reverse-connection.log\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Designer/reverse-connection.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "[/opt/microfocus/oo/designer/var/logs/localhost_access_log]\n",
                                            "file = /opt/microfocus/oo/designer/var/logs/localhost_access_log.*\n",
                                            "buffer_duration = 5000\n",
                                            "log_stream_name = {instance_id}-OO-Designer/localhost_access.log\n",
                                            "initial_position = start_of_file\n",
                                            "log_group_name = ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "awslogs": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "packages": {
                                        "yum": [
                                            "awslogs"
                                        ]
                                    },
                                    "files": [
                                        "/etc/awslogs/awscli.conf",
                                        "/etc/awslogs/awslogs.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "setupCfnHup": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack = ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region = ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "interval = 1"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers = post.update\n",
                                            "path=Resources.OODesignerInstance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init --verbose ",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " --resource OODesignerInstance",
                                            " --configsets startoodesigner",
                                            " runas=root\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "DependsOn": [
                "OOCentralAutoScalingGroup"
            ],
            "Condition": "CreateDesigner"
        },
        "OODesignerLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "LaunchTemplateName": {
                    "Fn::Sub": "${AWS::StackName}-OO_WorkflowDesigner_Launch_Template"
                },
                "LaunchTemplateData": {
                    "CreditSpecification": {
                        "Fn::If": [
                            "OODesignerTClassOption",
                            {
                                "CpuCredits": "standard"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::GetAtt": [
                                "OOInstancesIAMProfile",
                                "Arn"
                            ]
                        }
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            "AMZLNX1Designer"
                        ]
                    },
                    "InstanceType": {
                        "Ref": "OODesignerInstanceType"
                    },
                    "KeyName": {
                        "Ref": "OOKeyPairName"
                    },
                    "SecurityGroupIds": [
                        {
                            "Fn::GetAtt": [
                                "OOInstancesSecurityGroup",
                                "GroupId"
                            ]
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash -xe\n",
                                    "yum update -y",
                                    "\n",
                                    "yum install -y aws-cfn-bootstrap\n",
                                    "INSTID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`",
                                    "\n",
                                    "/opt/aws/bin/cfn-init -v ",
                                    "         --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "         --resource OODesignerInstance ",
                                    "         --configsets oodesignerconfig ",
                                    "         --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n",
                                    "/opt/aws/bin/cfn-signal -e $? -i $INSTID --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " --resource OODesignerInstance --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n"
                                ]
                            ]
                        }
                    }
                }
            },
            "Condition": "CreateDesigner"
        },
        "OODesignerListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "OODesignerTargetGroup"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/oo-designer*"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "OOListener"
                },
                "Priority": 2
            },
            "Condition": "CreateDesigner"
        },
        "OODesignerTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 15,
                "HealthCheckPath": "/oo-designer/",
                "HealthCheckPort": "8445",
                "HealthCheckProtocol": "HTTPS",
                "HealthCheckTimeoutSeconds": 10,
                "HealthyThresholdCount": 3,
                "Matcher": {
                    "HttpCode": "302"
                },
                "Port": 8445,
                "Protocol": "HTTPS",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-Workflow Designer Target Group"
                        }
                    }
                ],
                "TargetGroupAttributes": [
                    {
                        "Key": "deregistration_delay.timeout_seconds",
                        "Value": "60"
                    }
                ],
                "Targets": [
                    {
                        "Id": {
                            "Ref": "OODesignerInstance"
                        },
                        "Port": 8445
                    }
                ],
                "TargetType": "instance",
                "UnhealthyThresholdCount": 3,
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Condition": "CreateDesigner"
        },
        "OOIDMAdminListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "OODesignerTargetGroup"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/idm-admin*"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "OOListener"
                },
                "Priority": 1
            },
            "Condition": "CreateDesigner"
        },
        "OOIDMServiceListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "OODesignerTargetGroup"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/idm-service*"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "OOListener"
                },
                "Priority": 3
            },
            "Condition": "CreateDesigner"
        },
        "OOInstancesIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "OOStackSetupIAMRole"
                    }
                ]
            }
        },
        "OOInstancesSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "TCP and SSH rule(s) to the Central and Designer instances",
                "SecurityGroupIngress": [
                    {
                        "FromPort": 8445,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        },
                        "ToPort": 8445
                    },
                    {
                        "FromPort": 22,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "OOSSHAccessSGID"
                        },
                        "ToPort": 22
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-OO Instances Security Group"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            }
        },
        "OOListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "OOCentralTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ElasticLoadBalancerV2"
                },
                "Port": 80,
                "Protocol": "HTTP"
            }
        },
        "OOLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Ref": "AWS::StackName"
                },
                "RetentionInDays": 7
            }
        },
        "OOStackSetupIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "oo-log-group-policy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:PutObject",
                                        "s3:DeleteObject"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:s3:::${QSS3BucketNameForCluster}/${QSS3KeyPrefixForCluster}microfocus/*"
                                    },
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:ListBucket"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:s3:::${QSS3BucketNameForCluster}"
                                    },
                                    "Condition": {
                                        "StringLike": {
                                            "s3:prefix": [
                                                {
                                                    "Fn::Sub": "${QSS3KeyPrefixForCluster}microfocus/*"
                                                }
                                            ]
                                        }
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "s3-cluster-policy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "acm:ImportCertificate"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Condition": {
                                        "StringEquals": {
                                            "aws:RequestedRegion": {
                                                "Fn::Sub": "${AWS::Region}"
                                            }
                                        }
                                    }
                                }
                            ]
                        },
                        "PolicyName": "certificate-manager-policy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "elasticloadbalancing:ModifyListener"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Ref": "OOListener"
                                    }
                                },
                                {
                                    "Action": [
                                        "elasticloadbalancing:DescribeListeners"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "elb-modify-elb-listener-policy"
                    }
                ]
            },
            "DependsOn": "ElasticLoadBalancerV2"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZLNX1Central": "Amazon Linux 1 HVM with OO Central",
                "AMZLNX1Designer": "Amazon Linux 1 HVM with OO Workflow Designer"
            },
            "us-east-1": {
                "AMZLNX1Central": "ami-0babd12c7e2528e01",
                "AMZLNX1Designer": "ami-0d500625b9a7032e3"
            },
            "us-east-2": {
                "AMZLNX1Central": "ami-0774644177e0571a5",
                "AMZLNX1Designer": "ami-04191fa6e33274138"
            }
        }
    },
    "Outputs": {
        "OOCentralCluster": {
            "Description": "OO Central Cluster",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancerV2",
                                "DNSName"
                            ]
                        },
                        ":443/oo"
                    ]
                ]
            }
        },
        "OOWorkflowDesigner": {
            "Description": "OO Workflow Designer",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancerV2",
                                "DNSName"
                            ]
                        },
                        ":443/oo-designer"
                    ]
                ]
            },
            "Condition": "CreateDesigner"
        },
        "IDMAdmin": {
            "Description": "OO Workflow Designer Identity Management",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancerV2",
                                "DNSName"
                            ]
                        },
                        ":443/idm-admin"
                    ]
                ]
            },
            "Condition": "CreateDesigner"
        }
    }
}
